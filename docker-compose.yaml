services:
    zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        hostname: zookeeper
        container_name: zookeeper
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        healthcheck:
            test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - kafka-network

    kafka:
        image: confluentinc/cp-kafka:7.4.0
        depends_on:
            zookeeper:
                condition: service_healthy
        ports:
            - "9092:9092"
            - "9101:9101"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_JMX_PORT: 9101
            KAFKA_JMX_HOSTNAME: localhost
        healthcheck:
            test: ["CMD", "bash", "-c", "nc -z localhost 9092"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - kafka-network

    postgres:
        image: postgres:latest
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: postgres
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - kafka-network

    # flink:
    #   image: flink:1.2.1-scala_2.11
    #   ports:
    #     - "8081:8081"
    #   volumes:
    #     - ./flink-job/target/flink-job-1.0-SNAPSHOT.jar:/opt/flink-job-1.0-SNAPSHOT.jar
    #   networks:
    #     - kafka-network

networks:
    kafka-network:
        driver: bridge
